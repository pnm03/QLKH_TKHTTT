'use client'

import { useState, useEffect } from 'react'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useTheme, themeColors } from '@/app/context/ThemeContext'
import { PlusIcon, MagnifyingGlassIcon, PencilIcon, XMarkIcon, UserIcon, EnvelopeIcon, PhoneIcon, HomeIcon, CalendarIcon, ArrowPathIcon } from '@heroicons/react/24/outline'

interface Customer {
  customer_id: string
  full_name: string
  phone: string
  email: string
  hometown: string | null
  created_at: string
  updated_at: string
}

interface CustomerDetailProps {
  customer: Customer
  onClose: () => void
  onEdit: (customer: Customer) => void
  onDelete: (customer: Customer) => void
  theme: any
}

// Component hiển thị chi tiết khách hàng trong popup
const CustomerDetail = ({ customer, onClose, onEdit, onDelete, theme }: CustomerDetailProps) => {
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return new Intl.DateTimeFormat('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date)
  }

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:p-0">
        {/* Overlay mờ để vẫn nhìn thấy bên dưới */}
        <div className="fixed inset-0 backdrop-blur-[2px] bg-gray-500 bg-opacity-10" onClick={onClose}></div>
        <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div className="inline-block align-middle bg-transparent backdrop-filter backdrop-blur-md rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-lg sm:w-full relative z-50 border border-blue-500">
          <div className="absolute top-0 right-0 pt-4 pr-4">
            <button
              type="button"
              className="bg-transparent rounded-md text-gray-400 hover:text-gray-500 focus:outline-none"
              onClick={onClose}
            >
              <span className="sr-only">Đóng</span>
              <XMarkIcon className="h-6 w-6" aria-hidden="true" />
            </button>
          </div>
          <div className="bg-white bg-opacity-40 backdrop-filter backdrop-blur-sm px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="sm:flex sm:items-start">
              <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="md:w-1/3 flex justify-center">
                    <div className="relative w-full h-48 bg-gray-100 bg-opacity-60 rounded-lg overflow-hidden flex items-center justify-center">
                      <UserIcon className="h-24 w-24 text-gray-400" />
                    </div>
                  </div>
                  <div className="md:w-2/3">
                    <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                      {customer.full_name}
                    </h3>
                    <div className="mt-4 space-y-3">
                      <div key="email" className="flex items-center">
                        <EnvelopeIcon className="h-5 w-5 text-gray-400 mr-2" />
                        <span className="text-gray-700">{customer.email}</span>
                      </div>
                      <div key="phone" className="flex items-center">
                        <PhoneIcon className="h-5 w-5 text-gray-400 mr-2" />
                        <span className="text-gray-700">{customer.phone}</span>
                      </div>
                      {customer.hometown && (
                        <div key="hometown" className="flex items-center">
                          <HomeIcon className="h-5 w-5 text-gray-400 mr-2" />
                          <span className="text-gray-700">{customer.hometown}</span>
                        </div>
                      )}
                    </div>
                    <div className="mt-4 text-xs text-gray-500">
                      <p key="created-date">Ngày tạo: {formatDate(customer.created_at)}</p>
                      <p key="updated-date">Cập nhật: {formatDate(customer.updated_at)}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="bg-gray-50 bg-opacity-40 backdrop-filter backdrop-blur-sm px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              onClick={() => onEdit(customer)}
              className="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
            >
              <PencilIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
              Chỉnh sửa
            </button>
            <button
              type="button"
              onClick={() => onDelete(customer)}
              className="sm:ml-3 sm:w-auto sm:text-sm inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
              Xóa
            </button>
            <button
              type="button"
              className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
              onClick={onClose}
            >
              Đóng
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

// Component form thêm/sửa khách hàng
interface CustomerFormProps {
  isOpen: boolean
  isEdit: boolean
  customer: Customer | null
  onClose: () => void
  onSubmit: (data: Partial<Customer>) => void
  loading: boolean
  theme: any
}

const CustomerForm = ({ isOpen, isEdit, customer, onClose, onSubmit, loading, theme }: CustomerFormProps) => {
  const [formData, setFormData] = useState<Partial<Customer>>({
    full_name: '',
    phone: '',
    email: '',
    hometown: ''
  })
  
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [existingCustomer, setExistingCustomer] = useState<Customer | null>(null)
  const [checkingExisting, setCheckingExisting] = useState(false)
  const supabase = createClientComponentClient()

  useEffect(() => {
    if (isEdit && customer) {
      setFormData({
        full_name: customer.full_name,
        phone: customer.phone,
        email: customer.email,
        hometown: customer.hometown || ''
      })
    } else {
      setFormData({
        full_name: '',
        phone: '',
        email: '',
        hometown: ''
      })
    }
    // Reset existing customer when form opens/closes
    setExistingCustomer(null)
  }, [isEdit, customer, isOpen])

  // Check for existing customer by email or phone
  const checkExistingCustomer = async (field: 'email' | 'phone', value: string) => {
    if (!value || value.trim() === '') return
    
    // Skip check if we're in edit mode and the value hasn't changed
    if (isEdit && customer && customer[field] === value) {
      setExistingCustomer(null)
      return
    }
    
    setCheckingExisting(true)
    try {
      const { data, error } = await supabase
        .from('customers')
        .select('*')
        .eq(field, value)
        .single()
      
      if (error && error.code !== 'PGRST116') {
        console.error(`Error checking existing ${field}:`, error)
      }
      
      if (data) {
        setExistingCustomer(data)
      } else {
        setExistingCustomer(null)
      }
    } catch (err) {
      console.error(`Error checking existing ${field}:`, err)
    } finally {
      setCheckingExisting(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    
    // Clear error when user types
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
    
    // Check for existing customer when email or phone changes
    if (name === 'email' || name === 'phone') {
      if (value && value.trim() !== '') {
        // Debounce the check to avoid too many requests
        const timer = setTimeout(() => {
          checkExistingCustomer(name as 'email' | 'phone', value)
        }, 500)
        
        return () => clearTimeout(timer)
      } else {
        setExistingCustomer(null)
      }
    }
  }

  const validateForm = () => {
    const newErrors: Record<string, string> = {}
    
    // Validate full_name
    if (!formData.full_name?.trim()) {
      newErrors.full_name = 'Họ tên không được để trống'
    }
    
    // Validate phone
    if (!formData.phone?.trim()) {
      newErrors.phone = 'Số điện thoại không được để trống'
    } else if (!/^0\d{9,10}$/.test(formData.phone)) {
      newErrors.phone = 'Số điện thoại phải bắt đầu bằng số 0 và có 10-11 số'
    }
    
    // Validate email
    if (!formData.email?.trim()) {
      newErrors.email = 'Email không được để trống'
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Email không hợp lệ'
    }
    
    // Validate hometown if provided
    if (formData.hometown && formData.hometown.trim().length > 0 && formData.hometown.trim().length < 2) {
      newErrors.hometown = 'Quê quán phải có ít nhất 2 ký tự'
    }
    
    // Check if there's an existing customer with the same email or phone
    if (existingCustomer && !isEdit) {
      if (existingCustomer.email === formData.email) {
        newErrors.email = 'Email này đã được sử dụng bởi khách hàng khác'
      }
      if (existingCustomer.phone === formData.phone) {
        newErrors.phone = 'Số điện thoại này đã được sử dụng bởi khách hàng khác'
      }
    }
    
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (validateForm()) {
      onSubmit(formData)
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:p-0">
        <div className="fixed inset-0 backdrop-blur-[5px] bg-white bg-opacity-0" onClick={onClose}></div>
        <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div className="inline-block align-middle bg-transparent backdrop-filter backdrop-blur-md rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-xl sm:w-full relative z-50 border border-blue-500">
          <form onSubmit={handleSubmit}>
            <div className="bg-white bg-opacity-40 backdrop-filter backdrop-blur-sm px-6 pt-6 pb-6 sm:p-8">
              <div className="mb-6">
                <h3 className="text-xl leading-6 font-medium text-gray-900">
                  {isEdit ? 'Chỉnh sửa thông tin khách hàng' : 'Thêm khách hàng mới'}
                </h3>
                <p className="mt-1 text-sm text-gray-500">
                  Vui lòng điền đầy đủ thông tin bên dưới
                </p>
              </div>
              
              {/* Existing customer warning */}
              {existingCustomer && !isEdit && (
                <div className="mb-6 p-4 border border-yellow-300 bg-yellow-50 bg-opacity-90 rounded-md">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <h3 className="text-sm font-medium text-yellow-800">Khách hàng đã tồn tại</h3>
                      <div className="mt-2 text-sm text-yellow-700">
                        <p>
                          Đã tìm thấy khách hàng với thông tin tương tự:
                        </p>
                        <ul className="list-disc pl-5 mt-1 space-y-1">
                          <li>Tên: {existingCustomer.full_name}</li>
                          <li>Email: {existingCustomer.email}</li>
                          <li>SĐT: {existingCustomer.phone}</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              <div className="space-y-6">
                <div>
                  <label htmlFor="full_name" className="block text-sm font-medium text-gray-700">
                    Họ và tên <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    name="full_name"
                    id="full_name"
                    value={formData.full_name || ''}
                    onChange={handleChange}
                    className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-base py-3 ${errors.full_name ? 'border-red-300' : ''}`}
                    placeholder="Nhập họ và tên"
                  />
                  {errors.full_name && (
                    <p className="mt-1 text-sm text-red-600">{errors.full_name}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                    Số điện thoại <span className="text-red-500">*</span>
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      name="phone"
                      id="phone"
                      value={formData.phone || ''}
                      onChange={handleChange}
                      className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-base py-3 ${errors.phone ? 'border-red-300' : ''}`}
                      placeholder="Nhập số điện thoại"
                    />
                    {checkingExisting && formData.phone && (
                      <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                        <svg className="animate-spin h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      </div>
                    )}
                  </div>
                  {errors.phone && (
                    <p className="mt-1 text-sm text-red-600">{errors.phone}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                    Email <span className="text-red-500">*</span>
                  </label>
                  <div className="relative">
                    <input
                      type="email"
                      name="email"
                      id="email"
                      value={formData.email || ''}
                      onChange={handleChange}
                      className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-base py-3 ${errors.email ? 'border-red-300' : ''}`}
                      placeholder="Nhập địa chỉ email"
                    />
                    {checkingExisting && formData.email && (
                      <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                        <svg className="animate-spin h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      </div>
                    )}
                  </div>
                  {errors.email && (
                    <p className="mt-1 text-sm text-red-600">{errors.email}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="hometown" className="block text-sm font-medium text-gray-700">
                    Quê quán
                  </label>
                  <input
                    type="text"
                    name="hometown"
                    id="hometown"
                    value={formData.hometown || ''}
                    onChange={handleChange}
                    className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-base py-3 ${errors.hometown ? 'border-red-300' : ''}`}
                    placeholder="Nhập quê quán"
                  />
                  {errors.hometown && (
                    <p className="mt-1 text-sm text-red-600">{errors.hometown}</p>
                  )}
                </div>
              </div>
            </div>
            
            <div className="bg-gray-50 bg-opacity-40 backdrop-filter backdrop-blur-sm px-6 py-4 sm:px-8 sm:flex sm:flex-row-reverse">
              <button
                type="submit"
                disabled={loading}
                className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-6 py-3 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-base disabled:opacity-70 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Đang xử lý...
                  </>
                ) : isEdit ? 'Cập nhật' : 'Thêm mới'}
              </button>
              <button
                type="button"
                className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-6 py-3 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-base"
                onClick={onClose}
              >
                Hủy
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

// Component xác nhận xóa khách hàng
interface DeleteConfirmationProps {
  isOpen: boolean
  customer: Customer | null
  onClose: () => void
  onConfirm: () => void
  loading: boolean
}

const DeleteConfirmation = ({ isOpen, customer, onClose, onConfirm, loading }: DeleteConfirmationProps) => {
  if (!isOpen || !customer) return null

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:p-0">
        <div className="fixed inset-0 backdrop-blur-[5px] bg-white bg-opacity-0" onClick={onClose}></div>
        <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div className="inline-block align-middle bg-transparent backdrop-filter backdrop-blur-md rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-lg sm:w-full relative z-50 border border-red-500">
          <div className="bg-white bg-opacity-40 backdrop-filter backdrop-blur-sm px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="sm:flex sm:items-start">
              <div className="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                <svg className="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
              </div>
              <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                  Xác nhận xóa khách hàng
                </h3>
                <div className="mt-2">
                  <p className="text-sm text-gray-500">
                    Bạn có chắc chắn muốn xóa khách hàng <span className="font-medium">{customer.full_name}</span>? Hành động này không thể hoàn tác.
                  </p>
                </div>
              </div>
            </div>
          </div>
          <div className="bg-gray-50 bg-opacity-40 backdrop-filter backdrop-blur-sm px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
              onClick={onConfirm}
              disabled={loading}
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Đang xử lý...
                </>
              ) : 'Xóa'}
            </button>
            <button
              type="button"
              className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
              onClick={onClose}
            >
              Hủy
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

// Trang quản lý khách hàng
export default function CustomersPage() {
  const [customers, setCustomers] = useState<Customer[]>([])
  const [filteredCustomers, setFilteredCustomers] = useState<Customer[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)
  const [isDetailOpen, setIsDetailOpen] = useState(false)
  const [isFormOpen, setIsFormOpen] = useState(false)
  const [isEditMode, setIsEditMode] = useState(false)
  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false)
  const [formLoading, setFormLoading] = useState(false)
  const [deleteLoading, setDeleteLoading] = useState(false)
  const [refreshing, setRefreshing] = useState(false)
  
  // Notification state
  type NotificationType = 'success' | 'error' | 'info'
  interface NotificationState {
    visible: boolean
    message: string
    type: NotificationType
  }
  
  const [notification, setNotification] = useState<NotificationState>({
    visible: false,
    message: '',
    type: 'info'
  })
  
  // Show notification
  const showNotification = (type: NotificationType, message: string) => {
    setNotification({
      visible: true,
      message,
      type
    })
    
    // Auto hide after 2 seconds
    setTimeout(() => {
      setNotification(prev => ({ ...prev, visible: false }))
    }, 2000)
  }
  
  const themeContext = useTheme()
  const [mounted, setMounted] = useState(false)
  const [themeState, setThemeState] = useState(themeColors.indigo)
  
  // Set mounted = true after component is rendered on client
  useEffect(() => {
    setMounted(true)
  }, [])
  
  // Update themeState from context when component is mounted
  useEffect(() => {
    if (mounted && themeContext.currentTheme) {
      setThemeState(themeContext.currentTheme)
    }
  }, [mounted, themeContext.currentTheme])
  
  // Fetch customers from database
  const fetchCustomers = async () => {
    setLoading(true)
    const supabase = createClientComponentClient()
    
    try {
      const { data, error } = await supabase
        .from('customers')
        .select('*')
        .order('created_at', { ascending: false })
      
      if (error) throw error
      
      if (data) {
        setCustomers(data)
        setFilteredCustomers(data)
      }
    } catch (error) {
      console.error('Error fetching customers:', error)
    } finally {
      setLoading(false)
    }
  }
  
  // Initial fetch
  useEffect(() => {
    fetchCustomers()
  }, [])
  
  // Filter customers when search term changes
  useEffect(() => {
    if (searchTerm.trim() === '') {
      setFilteredCustomers(customers)
    } else {
      const term = searchTerm.toLowerCase().trim()
      const filtered = customers.filter(customer => 
        customer.full_name.toLowerCase().includes(term) ||
        customer.email.toLowerCase().includes(term) ||
        customer.phone.includes(term) ||
        (customer.hometown && customer.hometown.toLowerCase().includes(term))
      )
      setFilteredCustomers(filtered)
    }
  }, [searchTerm, customers])
  
  // Handle search input change
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value)
  }
  
  // Handle refresh button click
  const handleRefresh = async () => {
    setRefreshing(true)
    await fetchCustomers()
    setSearchTerm('')
    setRefreshing(false)
    showNotification('success', 'Đã tải lại danh sách khách hàng')
  }
  
  // Open customer detail modal
  const openCustomerDetail = (customer: Customer) => {
    setSelectedCustomer(customer)
    setIsDetailOpen(true)
  }
  
  // Close customer detail modal
  const closeCustomerDetail = () => {
    setIsDetailOpen(false)
    setTimeout(() => {
      setSelectedCustomer(null)
    }, 200)
  }
  
  // Open form to add new customer
  const openAddForm = () => {
    setIsEditMode(false)
    setSelectedCustomer(null)
    setIsFormOpen(true)
  }
  
  // Open form to edit customer
  const openEditForm = (customer: Customer) => {
    setIsEditMode(true)
    setSelectedCustomer(customer)
    setIsFormOpen(true)
    setIsDetailOpen(false)
  }
  
  // Close form
  const closeForm = () => {
    setIsFormOpen(false)
    setTimeout(() => {
      setIsEditMode(false)
      setSelectedCustomer(null)
    }, 200)
  }
  
  // Open delete confirmation
  const openDeleteConfirmation = (customer: Customer) => {
    setSelectedCustomer(customer)
    setIsDeleteConfirmOpen(true)
    setIsDetailOpen(false)
  }
  
  // Close delete confirmation
  const closeDeleteConfirmation = () => {
    setIsDeleteConfirmOpen(false)
    setTimeout(() => {
      setSelectedCustomer(null)
    }, 200)
  }
  
  // Handle form submission (add/edit)
  const handleFormSubmit = async (data: Partial<Customer>) => {
    const supabase = createClientComponentClient()
    setFormLoading(true)
    
    try {
      // Kiểm tra trùng lặp email và số điện thoại trước khi thêm/sửa
      if (!isEditMode) {
        // Chỉ kiểm tra khi thêm mới
        const { data: existingEmail } = await supabase
          .from('customers')
          .select('customer_id, full_name, email, phone')
          .eq('email', data.email)
          .maybeSingle()
          
        const { data: existingPhone } = await supabase
          .from('customers')
          .select('customer_id, full_name, email, phone')
          .eq('phone', data.phone)
          .maybeSingle()
          
        if (existingEmail) {
          throw {
            code: 'DUPLICATE_EMAIL',
            message: `Email này đã được sử dụng bởi khách hàng "${existingEmail.full_name}"`
          }
        }
        
        if (existingPhone) {
          throw {
            code: 'DUPLICATE_PHONE',
            message: `Số điện thoại này đã được sử dụng bởi khách hàng "${existingPhone.full_name}"`
          }
        }
      } else if (isEditMode && selectedCustomer) {
        // Khi chỉnh sửa, chỉ kiểm tra nếu email/phone đã thay đổi
        if (data.email !== selectedCustomer.email) {
          const { data: existingEmail } = await supabase
            .from('customers')
            .select('customer_id, full_name')
            .eq('email', data.email)
            .neq('customer_id', selectedCustomer.customer_id)
            .maybeSingle()
            
          if (existingEmail) {
            throw {
              code: 'DUPLICATE_EMAIL',
              message: `Email này đã được sử dụng bởi khách hàng "${existingEmail.full_name}"`
            }
          }
        }
        
        if (data.phone !== selectedCustomer.phone) {
          const { data: existingPhone } = await supabase
            .from('customers')
            .select('customer_id, full_name')
            .eq('phone', data.phone)
            .neq('customer_id', selectedCustomer.customer_id)
            .maybeSingle()
            
          if (existingPhone) {
            throw {
              code: 'DUPLICATE_PHONE',
              message: `Số điện thoại này đã được sử dụng bởi khách hàng "${existingPhone.full_name}"`
            }
          }
        }
      }
      
      if (isEditMode && selectedCustomer) {
        // Update existing customer
        const { error } = await supabase
          .from('customers')
          .update({
            full_name: data.full_name,
            phone: data.phone,
            email: data.email,
            hometown: data.hometown || null,
            updated_at: new Date().toISOString()
          })
          .eq('customer_id', selectedCustomer.customer_id)
        
        if (error) throw error
        
        showNotification('success', 'Cập nhật thông tin khách hàng thành công!')
      } else {
        // Add new customer
        const { error } = await supabase
          .from('customers')
          .insert([{
            full_name: data.full_name,
            phone: data.phone,
            email: data.email,
            hometown: data.hometown || null
          }])
        
        if (error) throw error
        
        showNotification('success', 'Thêm khách hàng mới thành công!')
      }
      
      // Close form and refresh data
      closeForm()
      await fetchCustomers()
    } catch (error: any) {
      console.error('Lỗi khi lưu dữ liệu khách hàng:', error)
      
      let errorMessage = 'Đã xảy ra lỗi khi lưu dữ liệu khách hàng'
      
      // Handle specific error cases
      if (error.code === 'DUPLICATE_EMAIL') {
        errorMessage = error.message
      } else if (error.code === 'DUPLICATE_PHONE') {
        errorMessage = error.message
      } else if (error.code === '23505') {
        if (error.message.includes('customers_email_key')) {
          errorMessage = 'Email này đã được sử dụng bởi khách hàng khác'
        } else if (error.message.includes('customers_phone_key')) {
          errorMessage = 'Số điện thoại này đã được sử dụng bởi khách hàng khác'
        }
      }
      
      showNotification('error', errorMessage)
    } finally {
      setFormLoading(false)
    }
  }
  
  // Handle delete customer
  const handleDeleteCustomer = async () => {
    if (!selectedCustomer) return
    
    setDeleteLoading(true)
    const supabase = createClientComponentClient()
    
    try {
      const { error } = await supabase
        .from('customers')
        .delete()
        .eq('customer_id', selectedCustomer.customer_id)
      
      if (error) throw error
      
      showNotification('success', `Đã xóa khách hàng "${selectedCustomer.full_name}" thành công!`)
      
      // Close confirmation and refresh data
      closeDeleteConfirmation()
      await fetchCustomers()
    } catch (error: any) {
      console.error('Lỗi khi xóa khách hàng:', error)
      
      let errorMessage = 'Đã xảy ra lỗi khi xóa khách hàng'
      if (error.message) {
        errorMessage = `Lỗi: ${error.message}`
      }
      
      showNotification('error', errorMessage)
    } finally {
      setDeleteLoading(false)
    }
  }
  
  // Format date for display
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return new Intl.DateTimeFormat('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date)
  }
  
  if (!mounted) return null
  
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      {/* Notification */}
      {notification.visible && (
        <div 
          className={`fixed top-4 right-4 z-50 rounded-md p-4 shadow-lg max-w-md transition-all duration-300 transform translate-y-0 opacity-100 ${
            notification.type === 'success' ? 'bg-green-50 text-green-800 border border-green-200' :
            notification.type === 'error' ? 'bg-red-50 text-red-800 border border-red-200' :
            'bg-blue-50 text-blue-800 border border-blue-200'
          }`}
        >
          <div className="flex items-start">
            <div className="flex-shrink-0">
              {notification.type === 'success' && (
                <svg className="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              )}
              {notification.type === 'error' && (
                <svg className="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              )}
              {notification.type === 'info' && (
                <svg className="h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              )}
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium">
                {notification.message}
              </p>
            </div>
          </div>
        </div>
      )}
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="px-6 py-5 border-b border-gray-200 flex flex-col md:flex-row md:items-center md:justify-between">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">
                Quản lý khách hàng
              </h2>
              <p className="mt-1 text-sm text-gray-500">
                Danh sách khách hàng của cửa hàng
              </p>
            </div>
            <div className="mt-4 md:mt-0">
              <button
                type="button"
                onClick={openAddForm}
                className={`inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}
              >
                <PlusIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
                Thêm khách hàng
              </button>
            </div>
          </div>
          
          {/* Search and filter */}
          <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div className="relative rounded-md shadow-sm flex-1">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <MagnifyingGlassIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                </div>
                <input
                  type="text"
                  value={searchTerm}
                  onChange={handleSearchChange}
                  className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 pr-12 py-3 sm:text-sm border-gray-300 rounded-md"
                  placeholder="Tìm kiếm theo tên, email, số điện thoại hoặc quê quán..."
                />
                {searchTerm && (
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                    <button
                      type="button"
                      onClick={() => setSearchTerm('')}
                      className="text-gray-400 hover:text-gray-500 focus:outline-none"
                    >
                      <XMarkIcon className="h-5 w-5" aria-hidden="true" />
                    </button>
                  </div>
                )}
              </div>
              
              <div>
                <button
                  type="button"
                  onClick={handleRefresh}
                  disabled={refreshing}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  {refreshing ? (
                    <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  ) : (
                    <ArrowPathIcon className="-ml-1 mr-2 h-5 w-5 text-gray-500" aria-hidden="true" />
                  )}
                  Tải lại
                </button>
              </div>
            </div>
            
            {/* Search results count */}
            <div className="mt-2 text-sm text-gray-500">
              {searchTerm ? (
                <p>Tìm thấy {filteredCustomers.length} khách hàng phù hợp</p>
              ) : (
                <p>Tổng số: {customers.length} khách hàng</p>
              )}
            </div>
          </div>
          
          {/* Customer list */}
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Khách hàng
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Liên hệ
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Quê quán
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ngày tạo
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Thao tác
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {loading ? (
                  <tr>
                    <td colSpan={5} className="px-6 py-4 text-center">
                      <div className="flex justify-center">
                        <svg className="animate-spin h-8 w-8 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      </div>
                      <p className="mt-2 text-sm text-gray-500">Đang tải dữ liệu...</p>
                    </td>
                  </tr>
                ) : filteredCustomers.length === 0 ? (
                  <tr>
                    <td colSpan={5} className="px-6 py-4 text-center">
                      <p className="text-sm text-gray-500">Không tìm thấy khách hàng nào</p>
                      {searchTerm && (
                        <button
                          type="button"
                          onClick={() => setSearchTerm('')}
                          className="mt-2 inline-flex items-center px-3 py-1.5 border border-gray-300 rounded-md text-xs font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                          Xóa bộ lọc
                        </button>
                      )}
                    </td>
                  </tr>
                ) : (
                  filteredCustomers.map(customer => (
                    <tr 
                      key={customer.customer_id} 
                      className="hover:bg-gray-50 cursor-pointer"
                      onClick={() => openCustomerDetail(customer)}
                    >
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10 bg-gray-100 rounded-full flex items-center justify-center">
                            <UserIcon className="h-6 w-6 text-gray-400" />
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">{customer.full_name}</div>
                            <div className="text-xs text-gray-500">ID: {customer.customer_id.substring(0, 8)}...</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{customer.email}</div>
                        <div className="text-sm text-gray-500">{customer.phone}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{customer.hometown || '-'}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(customer.created_at)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          type="button"
                          onClick={(e) => {
                            e.stopPropagation()
                            openEditForm(customer)
                          }}
                          className="text-blue-600 hover:text-blue-900 mr-4"
                        >
                          Sửa
                        </button>
                        <button
                          type="button"
                          onClick={(e) => {
                            e.stopPropagation()
                            openDeleteConfirmation(customer)
                          }}
                          className="text-red-600 hover:text-red-900"
                        >
                          Xóa
                        </button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
          
          {/* Pagination placeholder */}
          <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-700">
                  Hiển thị <span className="font-medium">{filteredCustomers.length}</span> khách hàng
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Customer detail modal */}
      {isDetailOpen && selectedCustomer && (
        <CustomerDetail
          customer={selectedCustomer}
          onClose={closeCustomerDetail}
          onEdit={openEditForm}
          onDelete={openDeleteConfirmation}
          theme={themeState}
        />
      )}
      
      {/* Add/Edit customer form */}
      <CustomerForm
        isOpen={isFormOpen}
        isEdit={isEditMode}
        customer={selectedCustomer}
        onClose={closeForm}
        onSubmit={handleFormSubmit}
        loading={formLoading}
        theme={themeState}
      />
      
      {/* Delete confirmation */}
      <DeleteConfirmation
        isOpen={isDeleteConfirmOpen}
        customer={selectedCustomer}
        onClose={closeDeleteConfirmation}
        onConfirm={handleDeleteCustomer}
        loading={deleteLoading}
      />
    </div>
  )
}